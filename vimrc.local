"enable F13 to use it as ESC. F13 is mapped to CAPS by Xmodmap
"type this if u get "trykey errors with mappings...." unmap <buffer> mapping

set <F13>=^[[25~
nnoremap <F13> i
inoremap <F13> <Esc>l
" inoremap ii <Esc>l
vnoremap <F13> <Esc>l
nmap <silent> <leader>sv :so $MYVIMRC.local<CR>
nnoremap <Leader>r :let @x=@" \| let @g=@* \| let @f=@+<CR>
let @q="5Gr16jr12jllr1lr0Gr1v$y:w:!./autnoname.sh 013klllr9:w:!./autoname.sh 0hr3lr4:w:!./autoname.sh 05Gr26jr22jllr1lr0Gr2v$y:w:!./autoname.sh 013klllr9:w:!./autoname.sh 0hr3lr4:w:!./autoname.sh 05Gr36jr32jllr1lr0Gr3v$y:w:!./autnoname.sh 013klllr9:w:!./autoname.sh 0hr3lr4:w:!./autoname.sh 0"
let @w="5Gr46jr42jllr1lr0Gr4v$y:w:!./autnoname.sh 013klllr9:w:!./autoname.sh 0hr3lr4:w:!./autoname.sh 05Gr56jr52jllr1lr0Gr5v$y:w:!./autoname.sh 013klllr9:w:!./autoname.sh 0hr3lr4:w:!./autoname.sh 05Gr66jr62jllr1lr0Gr6v$y:w:!./autnoname.sh 013klllr9:w:!./autoname.sh 0hr3lr4:w:!./autoname.sh 0"
"noremap <leader><leader>u :unmap <buffer> h \| unmap <buffer> j\| unmap <buffer> k\|unmap <buffer> l
noremap <leader><leader>u call Unmaphjkl()
" F11 Hotkey to Full-Screen. need to have wmctrl installed!
map <silent> <F11>
\    :call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")<CR>

"Important Remap for unimpaired plugin:https://github.com/tpope/vim-unimpaired
nmap ö [
nmap ä ]
omap ö [
omap ä ]
xmap ö [
xmap ä ]
"Session mappings
nnoremap <F2> :mksession! ~/dotfiles/vim_sessCode <cr> " Quick write session with F2
nnoremap <F3> :source ~/dotfiles/vim_sessCode <cr>     " And load session with F3
nnoremap <F6> :mksession! ~/dotfiles/vim_sessTex <cr> " Quick write session with F2
nnoremap <F7> :source ~/dotfiles/vim_sessTex <cr>     " And load session with F3
"nnoremap <Leader>s :let @a=@" \| let @"=@+ \| let @+=@a<CR>
"set some registers to stuff u want to use in the near future
"vnoremap <Leader>sg :call Setreg('g', '$yq')
"autoclose buggs out
let g:autoclose_on = 0
let @a='\delta_{n,m} B^{+}_{m}'
let @b='\delta_{n^{\prime},m} B^{+}_{n} \left(B_{m}B^{+}_{m}-B^{+}_{m}B_{m}\right)'
let @c='\left(1-\delta_{n,n^{\prime}}\right) \delta_{n,m}D^{+}_{m}B^{+}_{m}B_{n^{\prime}}+\left(1-\delta_{n,n^{\prime}}\right) \delta_{n^{\prime},m}D^{+}_{n}\left(B_{m}B^{+}_{m}-B^{+}_{m}B_{m} \right)'
"x macro. = mark equation u want to replace n->k, m'->n. /e for NO ERROR!
let @x=':s/_n/_k/gegv:s/_{n/_{k/gegv:s/n}/k}/gegv:s/m''/n/ge'


"autocmd for relativenumber. absolute number in insert mode, relativenumber in
"visual mode:
autocmd InsertEnter * :set rnu! "disable relativenumber
autocmd InsertLeave * :set rnu  "enable relativenumber
"LATEX SECTION
"get vimtex latexmk support via hotkeys USE VIMTEX - use carefully!latexmkrc
nmap <Leader><Space> :VimtexCompile<CR>
nmap <Leader>v :VimtexView<CR>
nmap <Leader>ls : VimtexStopAll<CR>
"function SyncZathura()
    "let mainname= expand(Tex_GetMainFileName(':p:h'))
    "echo mainname
"endfunction
let g:vimPath ='/usr/bin/gvim'

"inverse search not working but forward search is GOOD!
        map <leader>lj :execute '!cd ' . expand(Tex_GetMainFileName(':p:h')) .
                    \' &&    zathura -x  "' . g:vimPath . ' --servername 'v:
                    \servername'  --remote-wait +\%l \%f" --synctex-forward '
                  \. line(".").":1:" . expand(Tex_GetMainFileName(':p:h'))."/".substitute(expand('%:p'),
                    \expand(Tex_GetMainFileName(':p:h')).'\/','','') . 
                    \" " . expand(Tex_GetMainFileName(':p:r')) . ".pdf
                \  &"<CR><CR>
"VimtexView opens new viewer everytime use this map to forward search"
"nnoremap <expr><buffer><silent><leader>z  ':!zathura --synctex-forward '.line(".").':'.col('.').':% ' . shellescape(g: . ' >/dev/null<CR> <C-L>'
let g:tex_flavor                = 'latex'
let g:latex_DefaultTargetFormat = 'pdf'
let g:Tex_DefaultTargetFormat   = 'pdf'
"let g:latex_view_method = 'zathura'
let g:Tex_ViewRule_pdf    = 'zathura'
let g:Tex_CompileRule_pdf = 'xelatex --synctex = 1 -interaction = nonstopmode $*'
"vimtex latexmk. Be careful... latexmk is super wierd (infinte loops) disable
"continuos mode
let g:vimtex_latexmk_continuous=0
let g:vimtex_latexmk_background=1
let g:vimtex_view_general_viewer='zathura'
let g:latex_view_general_options=shellescape('--synctex-forward "' . exepath(v:progpath) . ' --servername ' . v:servername . ' +{%lline} {%ffile}"')
"ignore warnings in gcc output (latex)
set errorformat^=%-G%f:%l:\ warning:%m
"let vimtex_quickfix_ignore_all_warnings=1
"latex-suite disable [[ and quote mappings
let g:Tex_SmartKeyBS    = 0
let g:Tex_SmartKeyQuote = 0
"END LATEX SECTION
"spell checking ]s=,- forward search, [s=,. backward search"
set spell
set spelllang=de,en
set spellfile=~/.vim/spell/de.utf-8.add
nnoremap <Leader>. [s
noremap <Leader>- ]s
"importan alt+h = help menu.must be disabeld!!!!!!!!!!"
set winaltkeys=no
inoremap <silent> <A-l> <C-o>l
inoremap <silent> <A-h> <C-o>h
"disable arrow keys to BREAK the habit use HARDMODE!!"
"let g:hardtime_default_on=1
"nnoremap <leader>h <Esc>:HardTimeToggle<CR>
"options for vim session save. dont safe global and local settings"
set ssop-=options
"used for autocompleting brackets anduse Crtl+J for Jumping as in Latex-Suite!
imap <C-J>      <Plug>MarkersJumpF
map <C-J>      <Plug>MarkersJumpF
"color stuff and concealing options
set cole=2
let g:tex_conceal='agm'
hi Conceal guibg=NONE guifg=turquoise1
highlight Cursor guifg=white guibg=green
"LATEX-SUITE Custom Macros
augroup MyIMAPs
au!
au VimEnter * call IMAP('BRA', "\\bra{<++>}<++>", 'tex')
au VimEnter * call IMAP('KET', "\\ket{<++>}<++>", 'tex')
au VimEnter * call IMAP('BRK', "\\braket{<++>}{<++>}<++>", 'tex')
au VimEnter * call IMAP('OBRK', "\\obraket{<++>}{<++>}{<++>}<++>", 'tex')
au VimEnter * call IMAP('COM', "\\left[<++>,<++>\\right]_{-}<++>", 'tex')
au VimEnter * call IMAP('ACOM', "\\left[<++>,<++>\\right]_{+}<++>", 'tex')
au VimEnter * call IMAP('C21', "\\left[<++><++>,<++>\\right]_{-}<++>", 'tex')
au VimEnter * call IMAP('C12', "\\left[<++>,<++><++>\\right]_{-}<++>", 'tex')
au VimEnter * call IMAP('C22', "\\left[<++><++>,<++><++>\\right]_{-}<++>", 'tex')
au VimEnter * call IMAP('UP', "<++>^{+}_{<++>}<++>", 'tex')
au VimEnter * call IMAP('DW', "<++>_{<++>}<++>", 'tex')
"au VimEnter * call IMAP('`s', "\\sum_{<++>}<++>", 'tex') "already used = sigma
"au VimEnter * call IMAP('`P', "^{\prime}<++>", 'tex')
au VimEnter * call IMAP("`#", "^{\\star}<++>", 'tex')
au VimEnter * call IMAP("`'", "^{\\prime}<++>", 'tex')
au VimEnter * call IMAP("`P", "\\Pi", 'tex')
au VimEnter * call IMAP('EA*',"\\begin{align*}\<CR><++>\<CR>\\label{eq:<++>}\<CR>\\end{align*}",'tex')
"call s:Tex_SpecialMacros('EFI', '', 'figure', "\<C-r>=Tex_PutEnvironment('figure')\<CR>")
au VimEnter * call IMAP('EFF',
 \"\\begin{figure}[h!]\<CR>\\centering\<CR>\\includegraphics[width=0.9\\textwidth]{<+figpath+>}\<CR>\\caption{<+caption+>}\<CR>\\label{fig:<+label+>}\<CR>\\end{figure}\<CR>",'tex')
au VimEnter * call IMAP('REF',"$\\left( \\ref{<++>} \\right)$",'tex')
au VimEnter * call IMAP('FRA',"\\begin{frame}\<CR><++>\<CR>\\end{frame}",'tex')
"Fortran Custom Macros
au VimEnter * call IMAP('WR',"write(*,*)<++>",'')
augroup END

"filetype detection fix
filetype indent on
filetype plugin on
au BufRead,BufNewFile *.tex     setfiletype tex
"au FileType tex setlocal comments=s1:%
"latex surround mapping tests
"ascii 45 = - echo char2nr("-")) to check for it. r=114
let g:surround_45 = "\\\1environment: \1{\r}" "-
let g:surround_252 = "\\begin{\1environment: \1}\r\\end{\1\1}" "ü
autocmd FileType tex let b:surround_114 = "\\mathrm{\r}" "r
autocmd FileType tex let b:surround_56 = "\\bigl(\r\\bigr)" "8
autocmd FileType tex let b:surround_57 = "\\Bigl(\r\\Bigr)" "9
autocmd FileType tex let b:surround_48 = "\\biggl(\r\\,biggr)" "0

"NERDCommenter does not always work... change default C commenting
let g:NERDCustomDelimiters = {
        \ 'tex': { 'left': '%', 'leftAlt': '%', 'rightAlt': '%' },
    \ }

autocmd VimEnter * :silent!unmap <buffer> j
autocmd VimEnter * :silent!unmap <buffer> h
autocmd VimEnter * :silent!unmap <buffer> k
autocmd VimEnter * :silent!unmap <buffer> l

function Unmaphjkl()
     :silent!unmap <buffer> h
     :silent!unmap <buffer> j
     :silent!unmap <buffer> k
     :silent!unmap <buffer> l
endfunction
